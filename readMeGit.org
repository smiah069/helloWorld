* Getting Started with Git
  :PROPERTIES:
  :CUSTOM_ID: getting-started-with-git
  :END:

- To download a repository in the local directory, run the following
  command

#+BEGIN_QUOTE
  $ git clone /repo_link/
#+END_QUOTE

- To work with the latest version of repository in local repository
  drive, first fetch it in the local repo drive:

#+BEGIN_QUOTE
  $ git pull origin master (OR $ git fetch --all)
#+END_QUOTE

- "git status" is an important command that you run every time before
  pushing modified files to the repository

- Suppose you want to download the latest version from the GitHub
  repository in your local directory, modify some files, and then upload
  the modified version back to the repository in GitHub website. For
  that, follow the steps below. (I'm assuming that you've already set up
  the git repository in your local directory by $git clone /repo_link/)

  1. Go to the local directory Run >$git status
  2. Modify the contents of the files that you want to upload in the Git
     repository and then save all files.
  3. Run the following command to add all the files in the staging area
     of your local drive >$git add .
  4. Run the following command to commit changes in your local drive
     >$git commit -m "Type meaningful message here regarding the changes
     you made"
  5. Finally, you are ready to commit changes by */pushing/* updated
     files/contents to the remote repository. For that, simply type the
     following command >$git push

- Some usefull links

  - Upload/upgrade local repository to github (online) repository using
    the command line

    [[https://help.github.com/en/articles/adding-a-file-to-a-repository-using-the-command-line][See
    this link]]

  - How to upload a project to Github

  - [[https://stackoverflow.com/questions/12799719/how-to-upload-a-project-to-github][See
    this link]]

- Some other commands may be necessary:

#+BEGIN_QUOTE
  $ git remote add origin
  https://github.com/smiah069/gitHubReposSeniorProject1-18-19

  $ git pull origin master --allow-unrelated-histories

  $ git push --force origin master
#+END_QUOTE

** Common Errors with Git Commands
   :PROPERTIES:
   :CUSTOM_ID: common-errors-with-git-commands
   :END:

1. Error ~~~ fatal: refusing to merge unrelated histories Error redoing
   merge 1234deadbeef1234deadbeef ~~~

   Solution:

   #+BEGIN_QUOTE
     git pull origin master --allow-unrelated-histories git merge origin
     origin/master
   #+END_QUOTE

2. Suppose that you have a local (existing) git repository that needs to
   be updated with the remote repository. With "git pull origin master"
   you will get the following error

   #+BEGIN_EXAMPLE
     error: Untracked working tree file 'public/images/icon.gif' would be overwritten by merge
   #+END_EXAMPLE

   Solution:

   #+BEGIN_QUOTE
     git fetch --all
   #+END_QUOTE

   Then, you have two options:

   #+BEGIN_QUOTE
     git reset --hard origin/master
   #+END_QUOTE

   OR If you are on some other branch type:

   #+BEGIN_QUOTE
     git reset --hard origin/
   #+END_QUOTE

   /Explanation/ ~~~ git fetch downloads the latest from remote without
   trying to merge or rebase anything. Then the git reset resets the
   master branch to what you just fetched. The --hard option changes all
   the files in your working tree to match the files in origin/master
   ~~~

3. Error: "fatal: unable to auto-detect email address (got
   'Obby@ObbyWorkstation.(none)')"

   Solution: Run >git config --global user.email "yourEmail@email.com" >
   >git config --global user.name "Your name"

** Magit
   :PROPERTIES:
   :CUSTOM_ID: magit
   :END:

It is git UI for emacs. Instead of working with git commands from the
terminal, emacs magit allows to manage GitHub repository. Frequently
used keyboard commands are:

#+BEGIN_QUOTE
  C-x g => Keyboard shortcut for git status

  S => Stage all

  c c => Commit message followed by C-c C-c

  P p => Push

  ? => Help

  g => To refresh magit buffer

  TAB => To see differences in files

  C-t => To set default options
#+END_QUOTE

#+BEGIN_QUOTE
  M-p (M-n) => revisit previous (next) commit messages
#+END_QUOTE

#+BEGIN_QUOTE
  V V => reverting magit and commit

  V v => reverting magit and no commit
#+END_QUOTE

#+BEGIN_QUOTE
  r i => rebasing (change/delete commits and rebase)
#+END_QUOTE

#+BEGIN_QUOTE
  C-c C-k => quit current operation

  C-t => To set default options

  C-c C-a => Commit ammend
#+END_QUOTE

You may want to watch the
[[https://www.youtube.com/watch?v=vQO7F2Q9DwA][Youtube video]], which is
very helpful for beginners.

*Dealing with merge conflict using the built-in Ediff tool in emacs*

Suppose that you are changing a file locally. After that, changes are to
be pushed to the remote (upstream) branch following the steps: c c =>
Commit message => C-c C-c. However, when you want to push the local
changes to the remote repository using /Shift P p/, you see merge
conflict because one of your collaborator has commmitted some changes to
the same file in the remote repository. To resolve this issue using
magit, follow the steps below.

1. Fetch using /shift f p/
2. Move the cursor to Staged section followed by unmerged "filename" and
   then press e to open Ediff window: A, B, and C = diff(A+B)
3. Keep ether variant A or B

Let say you want to keep both variants. Then follow the steps as: Stage
local file => c c => Commit message => C-c C-c => Shift P p. However,
when you want to push the local changes to the remote repository, you
see merge conflict because one of your collaborator has commmitted some
changes to the same file in the remote repository.

1. Fetch using /shift f p/ (Merge commt message may already show up with
   all the merged text)
2. Move cursor to "unmerged ..origin/master"
3. m m

- *Stashing* :: Stashing is the process of temporarity shelving
  (storing) the current changes so that once can quickly switch to
  different different piece of work and come back to re-apply the
  stashed changes in the current work.
  [[https://www.atlassian.com/git/tutorials/saving-changes/git-stash][See
  this link]] for details.
